<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[minio笔记]]></title>
    <url>%2F2017%2F08%2F29%2Fminio-%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Minio 常用命令 123456# mac 安装miniobrew install minio/stable/minio# 启动minio serverminio server ~/Photos# 安装minio clientbrew install minio/stable/mc]]></content>
      <categories>
        <category>Minio</category>
      </categories>
      <tags>
        <tag>Minio 安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java 注解]]></title>
    <url>%2F2017%2F08%2F28%2Fjava-%E6%B3%A8%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[本文介绍java中的注解，第一部分给出注解的基础介绍，第二部给出一个注解的应用实例。 Java注解分为2个部分 自定义注解 元注解 一、注解介绍 1、Java 注解语法 1234Modifiers @interface AnnotationName&#123;element1 declaration;element2 declaration;&#125; 每一个元素的语法如下： 123type elementName();ortype elementName() default value; 2、举例 1234public @interface BugReport&#123;public int level() default 1;public String description;&#125; 3、元注解 用注解其他注解 java中定义的四种元注解 @Target(应用范围，class、method、field), @Retention（注解的生命周期）, @Documented, @Inherited 二、元注解解释 1、@Target（如果没有声明，则可以修饰任何的范围）： @Target说明了Annotation所修饰的对象范围：Annotation可被用于packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。 作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方） 取值(ElementType)有： 1234567 1.CONSTRUCTOR:用于描述构造器 2.FIELD:用于描述域 3.LOCAL_VARIABLE:用于描述局部变量 4.METHOD:用于描述方法 5.PACKAGE:用于描述包 6.PARAMETER:用于描述参数 7.TYPE:用于描述类、接口(包括注解类型)或enum声明 2、@Retention（如果没有声明，则默认为class级别）： @Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对Annotation的“生命周期”限制。 作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效） 取值（RetentionPoicy）有： 1234 1.SOURCE:在源文件中有效（即源文件保留） 2.CLASS:在class文件中有效（即class保留） 3.RUNTIME:在运行时有效（即运行时保留） 3、@Documented: @Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。 4、@Inherited： @Inherited元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。 注意：@Inheritedannotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。 当@Inheritedannotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inheritedannotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。 三、应用实例 注解本身是没有声明作用的，只用通过java的反射，注解才有意义，实例作用如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374* 作用：一般公司中会用代码review的环节，这个写了一个工具，别人在看代码的时候 * 如果发现的代码中的问题，直接添加注解，包括Bug的严重程度和错误信息 * 1、BugReport 自定义注解，用于注解发现代码中的bug * 2、DemoBugReport 要review的代码 */BugReport：注解定义@Target(&#123;ElementType.TYPE,ElementType.FIELD,ElementType.METHOD&#125;)@Retention(RetentionPolicy.RUNTIME)@Documented@Inheritedpublic @interface BugReport &#123; public int level() default 1;//bug 严重级别 public String description();//bug 信息描述&#125;DemoBugReport：注解运用@BugReport(level=10,description="should use abstract classs")public class DemoBugReport &#123; @BugReport(level=1,description="warning 1") public int value1; @BugReport(level=2,description="warning 2") public String value2; @BugReport(level=3,description="warning 3") public float value3; @BugReport(level=1,description="error 1") public void fun1()&#123; &#125; @BugReport(level=1,description="error 2") public void fun2()&#123; &#125; @BugReport(level=1,description="error 3") public void fun3()&#123; &#125; @BugReport(level=1,description="4") public void fun4()&#123; &#125; &#125;ReviewLog：通过反射来生成Bug 报告public class ReviewLog &#123; public static void main(String[] args) &#123; Class c = DemoBugReport.class; Annotation[] classAnnoatoins = c.getAnnotations(); System.out.println(c.getName()+" bug report"); System.out.println(); for(Annotation an:classAnnoatoins)&#123; if(an instanceof BugReport)&#123; BugReport report = (BugReport)an; System.out.println("bug level:"+report.level()+"\t"+"error info:"+report.description()); &#125; &#125; System.out.println(); System.out.println("field bug report"); System.out.println(); Field[] fs = c.getFields(); for(Field f:fs)&#123; Annotation[] fieldAnnoations = f.getAnnotations(); for(Annotation an:fieldAnnoations)&#123; if(an instanceof BugReport)&#123; BugReport report = (BugReport)an; System.out.println(f.getName()+"\t"+"bug level:"+report.level()+"\t"+"error info:"+report.description()); &#125; &#125; &#125; System.out.println(); System.out.println("method bug report"); System.out.println(); Method[] ms = c.getMethods(); for(Method m:ms)&#123; Annotation[] methodAnnoations = m.getAnnotations(); for(Annotation an:methodAnnoations)&#123; if(an instanceof BugReport)&#123; BugReport report = (BugReport)an; System.out.println(m.getName()+"\t"+"bug level:"+report.level()+"\t"+"error info:"+report.description()); &#125; &#125; &#125; &#125;&#125; 输出信息： 12345678910111213141516com.sunny.annotation.DemoBugReport bug reportbug level:10 error info:should use abstract classsfield bug reportvalue1 bug level:1 error info:warning 1value2 bug level:2 error info:warning 2value3 bug level:3 error info:warning 3method bug reportfun1 bug level:1 error info:error 1fun2 bug level:1 error info:error 2fun3 bug level:1 error info:error 3fun4 bug level:1 error info:4 四、备注 经常会看到如下面的注解 1@RequestMapping(&quot;hello&quot;) 上面的注解的圆括号中是不带属性名称的，那是因为RequestMapping中有value这个字段，java会特殊处理，不需要指定属性名也可以用,例如下面这样： 123public @interface MyAnnotation &#123; String value();&#125; 就可以不带属性名称使用了: 1234@Test("hello")public class Demo &#123;&#125;]]></content>
      <categories>
        <category>J2SE</category>
      </categories>
      <tags>
        <tag>java注解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker镜像]]></title>
    <url>%2F2017%2F08%2F26%2FDocker%E9%95%9C%E5%83%8F%2F</url>
    <content type="text"><![CDATA[获取镜像命令格式 1docker pull [选项] [Docker Registry地址]&lt;仓库名&gt;:&lt;标签&gt; Docker Registry地址：地址的格式一般是 &lt;域名/IP&gt;[:端口号]。默认地址是 Docker Hub。 仓库名：如之前所说，这里的仓库名是两段式名称，既 &lt;用户名&gt;/软件名&gt;。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。 例如下载ubuntu的： 1docker pull ubuntu:14.04 运行 1docker run -it --rm ubuntu:14.04 bash 参数说明 -it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。 --rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 --rm 可以避免浪费空间。 ubuntu:14.04：这是指用 ubuntu:14.04 镜像为基础来启动容器。 bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker 镜像</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker 基本概念以及安装]]></title>
    <url>%2F2017%2F08%2F26%2FDocker-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Docker基本概念 Docker镜像 Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。 因为镜像包含操作系统完整的 root 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 Union FS 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。 Docker 容器 镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。 **按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。 数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新 run，数据却不会丢失。** Docker Registry docker Registry上一个服务：如果需要在其它服务器上使用镜像，我们就需要一个集中的存储、分发镜像的服务 。 一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。 通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。 mac系统安装Docker 1brew cask install docker 前提的安装homebrew， 当然也可以去官网上直接下载安装，方法比较简单。 可以通过如下命令查看安装的信息 1234docker infodocker --versiondocker-compose --versiondocker-machine --version 我们先试着安装一下nginx服务，就下面一行简单的命令就可以搞定 1docker run -d -p 80:80 --name webserver nginx 要停止 Nginx 服务器并删除执行下面的命令： 12docker stop webserverdocker rm webserver 镜像加速器 如果在国内使用docker下载镜像可能或很慢，那么我就需要配置镜像加速器，如果选用阿里的镜像加速器的可以参考下面的地址 阿里镜像加速器]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker概念及安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dokcer 简介]]></title>
    <url>%2F2017%2F08%2F26%2FDokcer-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[Docker 2013年开源，加入Linux 基金会. Docker使用Google公司推出的GO 语言进行开发实现， 基于Linux内核的cgroup, namespace, 以及AUFS类的Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。 传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。 下图比较了传统虚拟化技术和Docker技术的区别 Docker的优点 更高效的利用系统资源 Docker不需要对硬件资源进行虚拟化，所以节省操作的系统的开销 更快速的启动时间 传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。 一致的运行环境 开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码在我机器上没问题啊” 这类问题。 持续交付和部署 更轻松的迁移 更轻松的维护和扩展 对比传统虚拟机总结 特性 容器 虚拟机 启动 秒级 分钟级 硬盘使用 MB GB 性能 接近原生 弱于 系统支持 单个系统接近上千个容器 一般几十个]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于java Integer的一个小问题]]></title>
    <url>%2F2017%2F08%2F19%2F%E5%85%B3%E4%BA%8Ejava-Integer%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[下面这段代码片段的输出是什么？ 12345Integer i1 = 127,i2 = 127,i3=128,i4=128; System.out.println(i1==i2); System.out.println(i1.equals(i2)); System.out.println(i3==i4); System.out.println(i3.equals(i4)); 答案如下 1234truefalsetruetrue 为什么是这样呢？首先equals方法我们是可以理解的，应为比较的值嘛，所以i1和i2都是等的，但是java中的“==”是比较的地址，为什么i1和i2是等的，i3和i4又是不等的呢？我们通过反编译程序把上面代码的字节码反编译一下，看看得到是什么 Integer i1 = Integer.valueOf(127);Integer i2 = Integer.valueOf(127);Integer i3 = Integer.valueOf(128);Integer i4 = Integer.valueOf(128); System.out.println(i1 == i2); System.out.println(i1.equals(i2)); System.out.println(i3 == i4); System.out.println(i3.equals(i4)); 我们在看看valueOf的源码 public static Integer valueOf(int i) { if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i); } 我们可以看到如果i的值是&gt;=-128并且是&lt;=127的（low，high分别是-128和127），那么java久就从一个缓冲里面读取数据，这就可以解释我们上面存在的问题呢。其实这么缓存是指也是可以通过jvm参数进行修改的]]></content>
      <categories>
        <category>java snippet</category>
      </categories>
      <tags>
        <tag>Java Integer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis 学习笔记一]]></title>
    <url>%2F2017%2F08%2F19%2FMybatis-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[这篇博文记录一下Mybatis的学习情况 [Mybatis官方教程]（http://www.mybatis.org/mybatis-3/zh/index.html） Mybatsi配置文件 configuration xml 该文件主要配置Mybatis的一些核心配置，包括数据源、事务、mapper 配置文件的路径、别名等配置信息，官方教程列出了详细的配置信息，这里不在赘述，下面是我的配置文件，仅供参考 12345678910111213141516171819202122232425262728293031&lt;configuration&gt; &lt;properties resource=&quot;database.properties&quot;&gt;&lt;/properties&gt; &lt;settings&gt; &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot; /&gt; &lt;/settings&gt; &lt;typeAliases&gt; &lt;typeAlias type=&quot;com.payne.entity.User&quot; alias=&quot;User&quot; /&gt; &lt;typeAlias type=&quot;com.payne.entity.Board&quot; alias=&quot;Board&quot; /&gt; &lt;typeAlias type=&quot;com.payne.entity.Topic&quot; alias=&quot;Topic&quot; /&gt; &lt;typeAlias type=&quot;com.payne.entity.Reply&quot; alias=&quot;Reply&quot; /&gt; &lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot; /&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot; /&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot; /&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;userMapper.xml&quot; /&gt; &lt;mapper resource=&quot;userMapper2.xml&quot; /&gt; &lt;mapper resource=&quot;topicMapper.xml&quot; /&gt; &lt;mapper resource=&quot;topicMapper2.xml&quot; /&gt; &lt;mapper resource=&quot;topicMapper3.xml&quot; /&gt; &lt;/mappers&gt;&lt;/configuration&gt; mapper配置文件 Mybatis主要是主要用来放置我们sql语句的地方，下面是我的两个mapper，一个对应用户表，一个对应话题表，可以查看一个用户发表了那些话题 userMapper.xml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;mapper namespace=&quot;userMapper&quot;&gt; &lt;sql id=&quot;selectAllUsers&quot;&gt; select * from user &lt;/sql&gt; &lt;select id=&quot;selectOneUser&quot; parameterType=&quot;map&quot; resultType=&quot;User&quot;&gt; select * from user where uId = #&#123;id&#125; and uName = #&#123;name&#125; &lt;/select&gt; &lt;select id=&quot;selectUserByUId&quot; parameterType=&quot;int&quot; resultType=&quot;hashmap&quot;&gt; &lt;include refid=&quot;selectAllUsers&quot;&gt;&lt;/include&gt; where uId = #&#123;id&#125; &lt;/select&gt; &lt;select id=&quot;selectAllUsers&quot; resultType=&quot;User&quot;&gt; &lt;include refid=&quot;selectAllUsers&quot;&gt;&lt;/include&gt; &lt;/select&gt; &lt;select id=&quot;selectAllTopic&quot; resultType=&quot;Topic&quot;&gt; select * from topic &lt;/select&gt; &lt;select id=&quot;selectTopicsByUId&quot; resultMap=&quot;resultUsers&quot;&gt; select u.uId as userId ,u.uName as userName ,uPass as userPass ,u.head as userHead ,u.regTime as userRegTime ,u.gender as userGender ,t.topicId as topicId ,t.title as topicTitle ,t.content as topicContent ,t.publishTime as topicPublishTime ,t.modifyTime as topicModifyTime from user u left join topic t on u.uId = t.uId where u.uId = #&#123;id&#125; &lt;/select&gt; &lt;resultMap id=&quot;resultUsers&quot; type=&quot;User&quot; &gt; &lt;id property=&quot;uid&quot; column=&quot;userId&quot; /&gt; &lt;result property=&quot;uname&quot; column=&quot;userName&quot; /&gt; &lt;result property=&quot;upass&quot; column=&quot;userPass&quot; /&gt; &lt;result property=&quot;head&quot; column=&quot;userHead&quot; /&gt; &lt;result property=&quot;regTime&quot; column=&quot;userRegTime&quot; /&gt; &lt;result property=&quot;gender&quot; column=&quot;userGender&quot; /&gt; &lt;collection property=&quot;topics&quot; javaType=&quot;ArrayList&quot; ofType=&quot;Topic&quot; resultMap=&quot;topicMapper.resultTopic&quot;&gt; &lt;/collection&gt; &lt;/resultMap&gt; &lt;resultMap type=&quot;User&quot; id=&quot;resultUser&quot;&gt; &lt;id property=&quot;uid&quot; column=&quot;userId&quot; /&gt; &lt;result property=&quot;uname&quot; column=&quot;userName&quot; /&gt; &lt;result property=&quot;upass&quot; column=&quot;userPass&quot; /&gt; &lt;result property=&quot;head&quot; column=&quot;userHead&quot; /&gt; &lt;result property=&quot;regTime&quot; column=&quot;userRegTime&quot; /&gt; &lt;result property=&quot;gender&quot; column=&quot;userGender&quot; /&gt; &lt;/resultMap&gt;&lt;/mapper&gt; topicMapper.xml 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;mapper namespace=&quot;topicMapper&quot;&gt; &lt;select id=&quot;selectAllTopic&quot; resultType=&quot;Topic&quot;&gt; select * from topic &lt;/select&gt; &lt;select id=&quot;selectAllTopicsByUid&quot; resultMap=&quot;resultTopics&quot;&gt; select u.uId as userId ,u.uName as userName ,uPass as userPass ,u.head as userHead ,u.regTime as userRegTime ,u.gender as userGender ,t.topicId as topicId ,t.title as topicTitle ,t.content as topicContent ,t.publishTime as topicPublishTime ,t.modifyTime as topicModifyTime from topic t left join user u on u.uId = t.uId &lt;/select&gt; &lt;resultMap id=&quot;resultTopics&quot; type=&quot;Topic&quot;&gt; &lt;id property=&quot;topicId&quot; column=&quot;topicId&quot;/&gt; &lt;result property=&quot;title&quot; column=&quot;topicTitle&quot;/&gt; &lt;result property=&quot;content&quot; column=&quot;topicContent&quot;/&gt; &lt;result property=&quot;publishTime&quot; column=&quot;topicPublishTime&quot;/&gt; &lt;result property=&quot;modifyTime&quot; column=&quot;topicModifyTime&quot;/&gt; &lt;collection property=&quot;user&quot; javaType=&quot;User&quot;&gt; &lt;id property=&quot;uid&quot; column=&quot;userId&quot;/&gt; &lt;result property=&quot;uname&quot; column=&quot;userName&quot;/&gt; &lt;result property=&quot;upass&quot; column=&quot;userPass&quot;/&gt; &lt;result property=&quot;head&quot; column=&quot;userHead&quot;/&gt; &lt;result property=&quot;regTime&quot; column=&quot;userRegTime&quot;/&gt; &lt;result property=&quot;gender&quot; column=&quot;userGender&quot;/&gt; &lt;/collection&gt; &lt;/resultMap&gt; &lt;resultMap type=&quot;Topic&quot; id=&quot;resultTopic&quot;&gt; &lt;id property=&quot;topicId&quot; column=&quot;topicId&quot; /&gt; &lt;result property=&quot;title&quot; column=&quot;topicTitle&quot; /&gt; &lt;result property=&quot;content&quot; column=&quot;topicContent&quot; /&gt; &lt;result property=&quot;publishTime&quot; column=&quot;topicPublishTime&quot; /&gt; &lt;result property=&quot;modifyTime&quot; column=&quot;topicModifyTime&quot; /&gt; &lt;/resultMap&gt;&lt;/mapper&gt; 一对一用association标记，多对一、一对多用collection标记 获得sqlSessionFactory Mybatis执行sql语句的核心类是sqlSessionFactory，通过如下方式获得sqlSessionFactory 123InputStream inputStream = null; inputStream = Resources.getResourceAsStream(resourceFile); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); 参数 Mybatis给Mapper中的sql语句传递参数, 单个参数直接传递，多个参数可以用索引、类、Map等方式传递 1List&lt;User&gt; users = sqlSession.selectList(&quot;userMapper.selectTopicsByUId&quot;,1); 1234 Map&lt;String, Object&gt; mapParams = new HashMap&lt;&gt;();mapParams.put("id", 1);Map&lt;String,Map&lt;String,String&gt;&gt; map = sqlSession.selectMap("userMapper.selectUserByUId", mapParams,"uName");System.out.println(map); 其他 Mybatis 核心的东西保护ResultMap、动态sql，参见官网]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA NIO]]></title>
    <url>%2F2017%2F06%2F11%2FJAVA-NIO%2F</url>
    <content type="text"><![CDATA[Java NIO(New IO)是一个可以替代标准Java IO API的IO API（从Java 1.4开始)，Java NIO提供了与标准IO不同的IO工作方式。 与标准IO的不同： Java NIO: Channels and Buffers（通道和缓冲区） Java NIO: Non-blocking IO（非阻塞IO） Java NIO: Selectors（选择器) Java NIO引入了选择器的概念，选择器用于监听多个通道的事件（比如：连接打开，数据到达）。因此，单个的线程可以监听多个数据通道。 Java NIO概述 Java NIO 由以下几个核心部分组成： Channels Buffers Selectors Channel与Buffer Java的NIO从Channel开始，Channel向buffer中读，向buffer中写。 Channel和Buffer有好几种类型。下面是JAVA NIO中的一些主要Channel的实现： FileChannel 从文件中读写数据。 DatagramChannel 能通过UDP读写网络中的数据。 SocketChannel 能通过TCP读写网络中的数据。 ServerSocketChannel 可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel。 这些通道涵盖了UDP 和 TCP 网络IO，以及文件IO Java NIO里关键的Buffer实现 ByteBuffer CharBuffer DoubleBuffer FloatBuffer IntBuffer LongBuffer ShortBuffer 这些Buffer覆盖了你能通过IO发送的基本数据类型：byte, short, int, long, float, double 和 char。 Selector Selector允许单线程处理多个 Channel。如果你的应用打开了多个连接（通道），但每个连接的流量都很低，使用Selector就会很方便。 Channel Java NIO的通道类似流，但又有些不同： 既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。 通道可以异步地读写。 通道中的数据总是要先读到一个Buffer，或者总是要从一个Buffer中写入。]]></content>
      <categories>
        <category>J2SE</category>
      </categories>
      <tags>
        <tag>NIO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java 泛型]]></title>
    <url>%2F2017%2F06%2F11%2Fjava-%E6%B3%9B%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[很多朋友对Java的泛型不是很理解，很多文章写的已不是很清楚，这篇博客对java泛型进行 一个总结。 泛型的转换： 1List&lt;Number&gt; foo1 = new ArrayList&lt;Integer&gt;();//illegal 很多朋友会写出上面的代码，但会报如下错误：Type mismatch: cannot convert from ArrayList&lt;Integer&gt; to List&lt;Number&gt;尽管Interge是Number的子类，但是ArrayList&lt;Integer&gt;不是List&lt;Number&gt;的子类，所以报错。下图可以很好解释这个问题。 java泛型的通配符? 这里可以分为两类（1）? extends T (2) ? super T. 1.1很多朋友对这两个不是很理解，也不知道上面时候用，我们知道java中提供泛型技术，是为了提供安全检查的，使得我们写的代码更加的健壮。 12345public static void print_e(List&lt;? extends Number&gt; list)&#123; for(Number n : list)&#123; System.out.println(n); &#125; &#125; 上面一个函数，我们可以传递如下的参数 12345678910List&lt;Integer&gt; list_i = new ArrayList&lt;Integer&gt;(); for(int i=0;i&lt;10;i++)&#123; list_i.add(i); &#125; List&lt;Double&gt; list_d = new ArrayList&lt;Double&gt;(); for(int i=0;i&lt;10;i++)&#123; list_d.add(i+0.0); &#125; print_e(list_i); print_e(list_d); 使得我们写的代码即具有通用型有可以提供必要的安全检查，当然print_e你可以写出如下形式，这里就不具有安全检查的效果了。 1void print_e(List list) 但是经常有的朋友写出如下的代码，我们举一个stackoverflow上的一个例子： 123List&lt;? extends Number&gt; foo3 = new ArrayList&lt;Number&gt;(); // Number &quot;extends&quot; Number (in this context) List&lt;? extends Number&gt; foo3 = new ArrayList&lt;Integer&gt;(); // Integer extends Number List&lt;? extends Number&gt; foo3 = new ArrayList&lt;Double&gt;(); // Double extends Number 上面的代码都是可以通过的，但是如果你向foo3中添加一个元素，比如foo3.add(new Integer(1)),讲话如下错误： The method add(capture#1-of ? extends Number) in the type List&lt;capture#1-of ? extends Number&gt; is not applicable for the arguments (Integer) 很多人觉得奇怪，Integer明明是Number的子类，为什么添加不进去了。 1List&lt;? extends Number&gt; foo3 = new ArrayList&lt;Number&gt;(); // Number &quot;extends&quot; Number (in this context) stackoverflow上一个朋友是这样解释的，解释的很好，借用他的解释如下： 1234567891011Reading - Given the above possible assignments, what type of object are you guarenteed to read from List foo3: You can read a Number because any of the lists that could be assigned to foo3 contain a Number or a subclass of Number. You can&apos;t read an Integer because foo3 could be pointing at a List&lt;Double&gt;. You can&apos;t read a Double because foo3 could be pointing at a List&lt;Integer&gt;. Writing - Given the above possible assignments, what type of object could you add to List foo3 that would be legal for all the above possible ArrayList assignments: You can&apos;t add an Integer because foo3 could be pointing at a List&lt;Double&gt;. You can&apos;t add a Double because foo3 could be pointing at a List&lt;Integer&gt;. You can&apos;t add a Number because foo3 could be pointing at a List&lt;Integer&gt;. You can&apos;t add any object to List&lt;? extends T&gt; because you can&apos;t guarantee what kind of List it is really pointing to, so you can&apos;t guarantee that the object is allowed in that List. The only &quot;guarantee&quot; is that you can only read from it and you&apos;ll get a T or subclass of T. 因为 List&lt;? extends Number&gt; foo3 中你既可以添加一个Integer的有可以添加一个Double的，所以编译器不知道你具体添加到的是哪一种类型，所以编译器不允许你添加元素 1.2再来看一下? super T的例子： 123List&lt;? super Integer&gt; foo3 = new ArrayList&lt;Integer&gt;(); // Integer is a &quot;superclass&quot; of Integer (in this context)List&lt;? super Integer&gt; foo3 = new ArrayList&lt;Number&gt;(); // Number is a superclass of IntegerList&lt;? super Integer&gt; foo3 = new ArrayList&lt;Object&gt;(); // Object is a superclass of Integer stackoverflow的解释如下： 123456789101112Reading - Given the above possible assignments, what type of object are you guaranteed to receive when you read from List foo3: You aren&apos;t guaranteed an Integer because foo3 could be pointing at a List&lt;Number&gt; or List&lt;Object&gt;. You aren&apos;t guaranteed an Number because foo3 could be pointing at a List&lt;Object&gt;. The only guarantee is that you will get an instance of an Object or subclass of Object (but you don&apos;t know what subclass). Writing - Given the above possible assignments, what type of object could you add to List foo3 that would be legal for all the above possible ArrayList assignments: You can add an Integer because an Integer is allowed in any of above lists. You can add an instance of a subclass of Integer because an instance of a subclass of Integer is allowed in any of the above lists. You can&apos;t add a Double because foo3 could be pointing at a ArrayList&lt;Integer&gt;. You can&apos;t add a Number because foo3 could be pointing at a ArrayList&lt;Integer&gt;. You can&apos;t add a Object because foo3 could be pointing at a ArrayList&lt;Integer&gt;. foo3你是不能读的，读出报如下类似错误Type mismatch: cannot convert from capture#2-of ? super Integer to Integer 因为foo3中的元素有可能是Integer，Number或者是Object的，所以编译器不知道读出的是什么类型，所以不允许你读出元素。 总的来说，你要读就用? extends T，你要写就就用 ? super T,你既要读，又要写，你就不用泛型直接定义List list，这样就好了，如果没还没有看明白，直接看stackoverflow上的这篇文章，解释的很好 http://stackoverflow.com/questions/4343202/difference-between-super-t-and-extends-t-in-java 这一篇的将泛型擦除的，也可以看一下 http://blog.csdn.NET/caihaijiang/article/details/6403349]]></content>
      <categories>
        <category>j2SE</category>
      </categories>
      <tags>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis 教程]]></title>
    <url>%2F2017%2F06%2F01%2FRedis-%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[Redis 与其他 key - value 缓存产品有以下三个特点： Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。 Redis支持数据的备份，即master-slave模式的数据备份。 Redis优势 性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。 丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。 原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。 丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。 安装 windows : 下载地址：https://github.com/MSOpenTech/redis/releases 自行选择安装 linux : 下载地址：http://redis.io/download 自行编译安装 开启服务 在安装目录运行 redis-server.exe redis.windows.conf 开启控制台 redis-cli.exe -h 127.0.0.1 -p 6379 然后就可以在控制台输入了，例子： set myKey hello_world get myKey 此时控制将输出 hello_world Redis配置 Redis的配置文件linux环境下为redis.conf, Windows环境下为redis.windows.conf 在命令模型下： 获得配置信息命令 CONFIG GET * //显示所有的配置信息 设置配置信息命令： CONFIG SET Redis支持的数据类型 Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。 Example： String类型 string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。 string类型是Redis最基本的数据类型，一个键最大能存储512MB。 基本命令： set name payne get name 控制台输出“payne” Hash类型 Redis hash 是一个键名对集合。 Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。 HMSET user:1 username payne password payne 基本命令 hmset hset hgetall hget 123456789127.0.0.1:6379&gt; HMSET user:1 username runoob password runoob points 200OK127.0.0.1:6379&gt; HGETALL user:11) &quot;username&quot;2) &quot;runoob&quot;3) &quot;password&quot;4) &quot;runoob&quot;5) &quot;points&quot;6) &quot;200&quot; List类型 Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。 12345678910redis 127.0.0.1:6379&gt; lpush runoob redis(integer) 1redis 127.0.0.1:6379&gt; lpush runoob mongodb(integer) 2redis 127.0.0.1:6379&gt; lpush runoob rabitmq(integer) 3redis 127.0.0.1:6379&gt; lrange runoob 0 101) &quot;rabitmq&quot;2) &quot;mongodb&quot;3) &quot;redis&quot; Set 类型 Redis的Set是string类型的无序集合。 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1) 123456789101112redis 127.0.0.1:6379&gt; sadd runoob redis(integer) 1redis 127.0.0.1:6379&gt; sadd runoob mongodb(integer) 1redis 127.0.0.1:6379&gt; sadd runoob rabitmq(integer) 1redis 127.0.0.1:6379&gt; sadd runoob rabitmq(integer) 0redis 127.0.0.1:6379&gt; smembers runoob1) &quot;rabitmq&quot;2) &quot;mongodb&quot;3) &quot;redis&quot; zset类型（有序集合） Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。 不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。 zset的成员是唯一的,但分数(score)却可以重复。 123456789101112redis 127.0.0.1:6379&gt; zadd runoob 0 redis(integer) 1redis 127.0.0.1:6379&gt; zadd runoob 0 mongodb(integer) 1redis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq(integer) 1redis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq(integer) 0redis 127.0.0.1:6379&gt; ZRANGEBYSCORE runoob 0 10001) &quot;redis&quot;2) &quot;mongodb&quot;3) &quot;rabitmq&quot; Redis 帮助 在命令行模型下输入help &lt;command&gt;]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringMVC深入解析]]></title>
    <url>%2F2017%2F05%2F28%2FSpringMVC%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[本文试着从源码的角度去解析springMVC框架 springMVC controller]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>springMVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpingMvc学习笔记]]></title>
    <url>%2F2017%2F05%2F25%2FSpingMvc%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[本文主要记录一些比较的零散的东西 一 1234567891011&lt;servlet&gt; &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt; &lt;servlet-class&gt; org.springframework.web.servlet.DispatcherServlet &lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springMVC-servlet.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; 这里的classpath路径指的是EB-INF/classes的目录 二 通过spring注解创建的Bean，默认是单例模式 如果需要多例模式用如下方式： 1234567@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)public class HelloService &#123;&#125;或者@Scope(&quot;prototype&quot;)public class HelloService &#123;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[解决eclipse无法创建Web Module 3.0的问题]]></title>
    <url>%2F2017%2F05%2F24%2F%E8%A7%A3%E5%86%B3eclipse%E6%97%A0%E6%B3%95%E5%88%9B%E5%BB%BAWeb-Module-3-0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Eclipse 新建Maven工程选择maven-archetype-webapp新建dynamic web工程创建的工程版本比较低 在Eclipse中把项目修改为web Moudule3.0或者更高的版本时，会有如下问题： Can not change version of project facet Dynamic web Moudule to 3.0 需要项目目录.setting目录的org.eclipse.wst.common.project.facet.core.xml文件 把该文件中的jst.web属性修改为3.0，然后在Eclipse中刷新工程就好]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Question</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux 文件系统笔记]]></title>
    <url>%2F2017%2F05%2F21%2Flinux-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[用户管理 useradd wang#添加用户wang 会自动创建用户组 adduser wang#会创建目录，组信息，useradd不会创建用户目录 tail -l /etc/passwd #查看wang用户的账户信息 tail -l /etc/group #查看用户组的账户信息 tail -l /etc/shadow #查看加密后的用户账号和密码信息 usermod #修改用户账号信息 userdel #删除用户账号 userdel -r 则一并删除用户目录 passwd wang #更改wang这个用户的密码 addgroup hadoop #创建用户组 文件目录的权限管理 ll 查得的权限的第一位 -表示文件 d表示目录 --- --- --- 分别对应的是文件所有者、同组用户、其他用户的权限 更改文件（目录）权限 chmod chmod 格式 字符方式 chmod [userType] [signal] [type] [filename] userType u(宿主) g（同组）o（其他用户）a(所有用户) signal + - = type r w x 数字方式 0 无权限 1 执行权限 2 写权限 4 读权限 （注意没有3） chmod 764 test.txt 表示此文件1.宿主有读写执行权限2.同组用户有读和写权限3.其他用户只要读权限 文件查找 find . -name 'sql' 按名字查找sql的文件 Vim编辑器 grep查询文本中包含的字符串 grep -n main demo1.c #查询demo.c中的是否有main字符串，并显示行号 软连接与硬链接 ll -i(linux中，每个文件都有一个索引节点号，改名了显示index) 硬链接：硬连接指通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号， 称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是 允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录 的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后， 文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。 软连接：另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于Windows的快捷方式。它实际上是一个 特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。 例子： touch f1(新建文件f1) ln f1 f2(linux默认是建立硬链接，表示f2指向f1的硬链接，f1 与 f2 索引节点号相同，及时删除f1,f2还是可用的) ln -s f1 f2(f2指向f1的软连接，节点索引号不同，删除f2可以，删除f1时则不能访问f2) 七、查看系统安装了那些包 dpkg -l|drep xx //xx我包名 ubuntu rpm -qa|grep xx //centos 下查看安装那些包 适用于包安装 不适于编译安装]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>linux基本命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git学习笔记]]></title>
    <url>%2F2017%2F05%2F21%2Fgit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[首先配置自已的git 12$ git config --global user.name &quot;John Doe&quot;$ git config --global user.email johndoe@example.com 常用命令 12345678git commit --amend 撤销最近一次的修改git fetch [remote-name] 从远程仓库中抓取数据git push [remote-name] [branch-name] 将数据推送到远程的某个分支git remote add [shortname] [url] //远程添加一个分支git remote show [remote-name] git tag -a v1.4 -m &apos;my version 1.4&apos; 打标签git show v1.4 显示v1.4这个标签的xinxgit tag 查看已经打了哪些标签 建立新的分支 12345678910111213141516git branch pan //新建分支pangit checkout pan //切到pan分支 此时HEAD指向的是pan master指向的是建立分支之前的commit指针git checkout -b pan //新建并切换到分支pangit merge pan git branch -d pan //当某个分支问题解决了以后，就可以删除这个分支了git merge master //在某个分支上将master中的内容合并过来git branch --merged//查看已经合并的分支git branch --no-merged //查看没有合并的分支git mergetool//调用解决合并冲突的工具git fetch origin //来同步远程服务器上的数据到本地git push (远程仓库名) (分支名) //推送本地分支，这个是推送到远程的同名分支git push origin serverfix:awesomebranc//推送到远程的其他的分支 建立新的分支 123456git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;## example git push origin payne:payne //如果远程分支名不存在，则创建分支git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;## example git pull origin next:master //取回origin主机的next分支，与本地的master分支合并 删除远程分支develop: 123git push origin --delete developgit branch -a 查看所有的分支，包括本地和远程的git branch -r 查看远程分支 12git fetch origin dev-pan取回远程的某个分支，所取回的更新，在本地主机上要用&quot;远程主机名/分支名&quot;的形式读取。比如origin主机的master，就要用origin/master读取。git merge origin/dev-pan 在某个分支上把刚才取回的运程分支合并到现在的某个分支 建立裸仓,两种方法 将本地的导出为裸仓 1234git clone --bare my_project my_project.git //my_project这个仓已经存在了scp -r my_project.git user@git.example.com:/opt/git //将裸仓移到服务器上git init --bare --shared //如果对服务器上裸仓没有权限 此命令用于获得权限git clone root@120.24.72.202:/home/my_project/my_project.git //将裸仓中的内容复制出来 直接建立裸仓（里面无内容） 12345678910cd /opt/git $ mkdir project.git $ cd project.git $ git --bare init $ cd myproject $ git init $ git add . $ git commit -m &apos;initial commit&apos; $ git remote add origin git@gitserver:/opt/git/project.git $ git push origin master 其他人的克隆和推送也一样变得很简单： 1234$ git clone git@gitserver:/opt/git/project.git$ vim README$ git commit -am &apos;fix for the README file&apos;$ git push origin master]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo设置主题、配置]]></title>
    <url>%2F2017%2F05%2F20%2Fhexo%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%A2%98%E3%80%81%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Next主题只显示摘要 在首页，如果把每一篇文章的全部内容都显示出来的比较难看，所以可以配置让nexT主题只显示 文章标题和一部分摘，在nexT的配置文件_config.xml中，找到auto_excert:如下修改,false改为 true即可： ‘’’ auto_excerpt: enable: true length: 150 ’’’ Hexo官网教程 NexT教程]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown 基本语法]]></title>
    <url>%2F2017%2F05%2F20%2Fmarkdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1、分段 两个回车 2、换行 两个空格 + 回车 3、标题 #~###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题 4、引用 &gt; 5、列表 *，+，-，1.，选其中之一，注意后面有个空格 6、代码区块 四个空格开头 7、链接 [文字](链接地址) 8、图片 ![图片说明](图片地址)，图片地址可以是本地路劲，也可以是网络地址 9、强调 **文字**，文字，文字，文字 //标记于文本之间不要空格 10、代码 ```代码``` //Tab上面的那个键 11、强调带+背景色 `文字` 12、自动连接 &lt;www.baidu.com&gt; 13、转移 \ 使得markdown自带标记失效 ##Markdown详细教程]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim 常用快捷键]]></title>
    <url>%2F2017%2F05%2F20%2Fvim-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[移动 h 左移 l 右移 j 下移 k 上移 w 移动一个单词 W 移动下一个单词开头，但忽略一些标点 e 前移一个单词，光标停在下一个单词末尾 E 移动到下一个单词末尾，如果词尾有标点，则移动到标点 0 移动到行首 $ 移动到行尾 gg 移动最前面 shift+g 移动到最后面 翻屏 crtl+f 下翻一屏 crtl+b 上翻一屏 zz 移动到屏幕最中央 复制、粘贴、删除 y 复制一行 :m,ny 复制m到n行 d 删除一行 :m,nd 剪切m到n行 p 粘贴 打开多个文件 :sp file 水平打开多个文件 :vsp file 垂直打开多个文件 ctrl+w 双击快速切换窗口 ctrl+w+j/k 快速上下切换 u 撤销 ctrl+r 反向撤销]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建个人博客]]></title>
    <url>%2F2017%2F04%2F27%2FHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[第一次用Hexo搭建个人博客，原来用的CSDN的博客，但是嫌弃它不够简洁，有点花哨, 所以趁有时间就想自已搭建一个博客。既然是第一篇文章，有必要把Hexo搭建博客的过程写下来 安装 安装步骤如下： 1、安装Hexo需要先安装下面应用程序(根据自已的系统选择安装方式，window和mac系统直接官网下载安装 ，linux用户可以自带的安装程序安装)： Node.js Git 2、运行如下命令 npm install -g hexo-cli 初始化 选择一个目录，执行如下命令： hexo init Hexo Hexo 是你建立文件的名称，cd到Hexo的文件，执行如下命令： npm install 执行如下命令，就可以开启hexo服务器了（可以在本地访问）： hexo s 此时，在浏览器中打开网址http://localhost:4000,就能过看到如下页面 本地设置好了以后，接下来开始设置用github来访问我们的博客 设置GitHub 1、创建仓库 登录你的Github帐号，新建仓库，名为用户名.github.io固定写法，如payne4handsome.github.io 即下图中1所示： 2、配置部署信息 本地的Hexo的文件内容如下： 1234567_config.yml db.json node_modules package.jsonscaffoldssourcethemes cd到Hexo的文件写，打开hexo的配置文件_config.xml，在配置文件的最后 做下面的这样的修改（这样hexo d命令可以直接把写的文章部署到我们git仓库上） 1234deploy: type: git repository: https://github.com/payne4handsome/payne4handsome.github.io branch: master 写博客 hexo命令的基本语法为： hexo &lt;command&gt; 12345678910111213141516171819202122Commands: clean Removed generated files and cache. config Get or set configurations. deploy Deploy your website. generate Generate static files. help Get help on a command. init Create a new Hexo folder. list List the information of the site migrate Migrate your site from other system to Hexo. new Create a new post. publish Moves a draft post from _drafts to _posts folder. render Render files with renderer plugins. server Start the server. version Display version information.Global Options: --config Specify config file instead of using _config.yml --cwd Specify the CWD --debug Display all verbose messages in the terminal --draft Display draft posts --safe Disable all plugins and scripts --silent Hide output on console 比如我们要创建一篇新的博客： hexo new 'hello world' 然后我们找到Hexo的目录下面的source/_posts目录下面的‘hello world’.md开始编辑（markdown语法） hexo g (同hexo generate) 生产静态文件 +hexo d（同hexo deploy） 部署到github 总结 123hexo generate --watch //Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。hexo generate --deploy //和下面的命令一样hexo deploy --generate 上面的两个命令可以简写为： 12hexo g -dhexo d -g Questions 一开始我用的hexo自动Markdown解析器，但是我在vim编辑文章时，如果我在vim中 换行，那么显示的页面就会换行，这样排版会难看（每一行字数可能不一样），那 么需要执行下面命令，安装新的Markdown解析器： 12npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it --save]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>